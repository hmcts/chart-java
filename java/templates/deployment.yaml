---
apiVersion: apps/v1
kind: Deployment
metadata:
  name:  {{ template "hmcts.java.releaseName" . }}
  labels:
    {{- ( include "java.labels" . ) | indent 4 }}
  annotations:
    {{- ( include "java.annotations" . ) | indent 4 }}
spec:
  revisionHistoryLimit: 0
  replicas: {{ .Values.replicas }}
  selector:
    matchLabels:
      app.kubernetes.io/name: {{ template "hmcts.java.releaseName" . }}
  template:
    metadata:
      labels:
        {{- ( include "java.labels" . ) | indent 8 }}
      annotations:
        {{- ( include "java.annotations" . ) | indent 8 }}
    spec:
      {{- if .Values.useInterpodAntiAffinity }}
      affinity:
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
          - labelSelector:
              matchExpressions:
              - key: app.kubernetes.io/name
                operator: In
                values:
                - {{ template "hmcts.java.releaseName" . }}
            topologyKey: "kubernetes.io/hostname"
      {{- end }}
      {{- if and .Values.keyVaults .Values.global.enableKeyVaults }}
      volumes:
        {{- $globals := .Values.global }}
        {{- $aadIdentityName := .Values.aadIdentityName }}
        {{- range $key, $value := .Values.keyVaults }}
        - name: vault-{{ $key }}
          flexVolume:
            driver: "azure/kv"
            {{- if not $aadIdentityName }}
            secretRef:
              name: {{ default "kvcreds" $value.secretRef }}
            {{- end }}
            options:
              usepodidentity: "{{ if $aadIdentityName }}true{{ else }}false{{ end}}"
              tenantid: {{ $globals.tenantId }}
              keyvaultname: {{if $value.excludeEnvironmentSuffix }}{{ $key | quote }}{{else}}{{ printf "%s-%s" $key $globals.environment }}{{ end }}
              keyvaultobjectnames: {{ $value.secrets | join ";" | quote }}  #"some-username;some-password"
              keyvaultobjecttypes: {{ trimSuffix ";" (repeat (len $value.secrets) "secret;") | quote }} # OPTIONS: secret, key, cert
        {{- end }}
      {{- end }}
      securityContext:
        runAsUser: 1000
        fsGroup: 1000
      containers:
      - image: {{ .Values.image }}
        name: {{ template "hmcts.java.releaseName" . }}
        securityContext:
          allowPrivilegeEscalation: false
        env:
        {{- if .Values.global.devMode }}
        - name: AZURE_APPLICATIONINSIGHTS_INSTRUMENTATIONKEY
          value: {{ .Values.devApplicationInsightsInstrumentKey | quote }}
        {{- else if .Values.applicationInsightsInstrumentKey }}
        - name: AZURE_APPLICATIONINSIGHTS_INSTRUMENTATIONKEY
          value: {{ .Values.applicationInsightsInstrumentKey | quote }}
        {{- end -}}
          {{- (include "java.secrets" .) | indent 8 }}
          {{- (include "java.environment" .) | indent 8 }}

        {{- if .Values.configmap }}
        envFrom:
          - configMapRef:
              name: {{ template "hmcts.java.releaseName" . }}
        {{- end }}

        {{- if and .Values.keyVaults .Values.global.enableKeyVaults }}
        volumeMounts:
          {{- range $key, $value := .Values.keyVaults }}
          - name: vault-{{ $key }}
            mountPath: /mnt/secrets/{{ $key }}
            readOnly: true
          {{- end }}
        {{- end }}

        {{if .Values.global.devMode -}}
        resources:
          requests:
            memory: {{ .Values.devmemoryRequests }}
            cpu: {{ .Values.devcpuRequests }}
          limits:
            memory: {{ .Values.devmemoryLimits }}
            cpu: {{ .Values.devcpuLimits }}
        {{- else -}}
        resources:
          requests:
            memory: {{ .Values.memoryRequests }}
            cpu: {{ .Values.cpuRequests }}
          limits:
            memory: {{ .Values.memoryLimits }}
            cpu: {{ .Values.cpuLimits }}
        {{- end }}

        ports:
        - containerPort: {{ .Values.applicationPort }}
          name: http
        livenessProbe:
          httpGet:
            path: {{ .Values.livenessPath }}
            port: {{ .Values.applicationPort }}
          initialDelaySeconds: {{ .Values.livenessDelay }}
          timeoutSeconds: {{ .Values.livenessTimeout }}
          periodSeconds: {{ .Values.livenessPeriod }}
          failureThreshold: {{ .Values.livenessFailureThreshold }}
        readinessProbe:
          httpGet:
            path: {{ .Values.readinessPath }}
            port: {{ .Values.applicationPort }}
          initialDelaySeconds: {{ .Values.readinessDelay }}
          timeoutSeconds: {{ .Values.readinessTimeout }}
          periodSeconds: {{ .Values.readinessPeriod }}
        imagePullPolicy: IfNotPresent
