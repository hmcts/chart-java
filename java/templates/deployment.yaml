---
apiVersion: apps/v1
kind: Deployment
metadata:
  name:  {{ template "hmcts.releaseName" . }}
  labels:
    app.kubernetes.io/name: {{ template "hmcts.releaseName" . }}
    helm.sh/chart: {{ .Chart.Name }}-{{ .Chart.Version }}
    app.kubernetes.io/managed-by: {{ .Release.Service }}
    app.kubernetes.io/instance: {{ template "hmcts.releaseName" . }}
spec:
  replicas: {{ .Values.replicas }}
  selector:
    matchLabels:
      app.kubernetes.io/name: {{ template "hmcts.releaseName" . }}
  template:
    metadata:
      annotations:
        {{- if .Values.buildID }}
        buildID: {{ .Values.buildID }}
        {{- end }}
      labels:
        {{- if .Values.draft }}
        draft: {{ .Values.draft }}
        {{- end }}
        app.kubernetes.io/name: {{ template "hmcts.releaseName" . }}
    spec:
      revisionHistoryLimit: 0
      {{- if .Values.useInterpodAntiAffinity }}
      affinity:
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
          - labelSelector:
              matchExpressions:
              - key: app.kubernetes.io/name
                operator: In
                values:
                - {{ template "hmcts.releaseName" . }}
            topologyKey: "kubernetes.io/hostname"
      {{- end }}
      {{- if .Values.keyVaults }}
      volumes:
        {{ $globals := .Values.global }}
        {{- range $key, $value := .Values.keyVaults }}
        - name: kvcreds-{{ $key }}
          flexVolume:
            driver: "azure/kv"
            secretRef:
              name: {{ default "kvcreds" $value.secretRef }}
            options:
              usepodidentity: "false"
              subscriptionid: {{ $globals.subscriptionId }}
              tenantid: {{ $globals.tenantId }}
              keyvaultname: {{if $value.excludeEnvironmentSuffix }}{{ $key | quote }}{{else}}{{ printf "%s-%s" $key $globals.environment }}{{ end }}
              resourcegroup: {{if $value.excludeEnvironmentSuffix }}{{ $value.resourceGroup | quote }}{{else}}{{ printf "%s-%s" $value.resourceGroup $globals.environment }}{{ end }}
              keyvaultobjectnames: {{ $value.secrets | join ";" | quote }}  #"some-username;some-password"
              keyvaultobjecttypes: {{ trimSuffix ";" (repeat (len $value.secrets) "secret;") | quote }} # OPTIONS: secret, key, cert
        {{- end }}
      {{- end }}
      securityContext:
        runAsUser: 1000
        fsGroup: 1000
      containers:
      - image: {{ .Values.image }}
        name: {{ template "hmcts.releaseName" . }}
        securityContext:
          allowPrivilegeEscalation: false
        env:
        - name: AZURE_APPLICATIONINSIGHTS_INSTRUMENTATIONKEY
          value: {{ .Values.applicationInsightsInstrumentKey | quote }}
          {{- (include "java.secrets" .) | indent 8 }}
          {{- (include "java.environment" .) | indent 8 }}

        {{- if .Values.configmap }}
        envFrom:
          - configMapRef:
              name: {{ template "hmcts.releaseName" . }}
        {{- end }}

        {{- if .Values.keyVaults }}
        volumeMounts:
          {{- range $key, $value := .Values.keyVaults }}
          - name: kvcreds-{{ $key }}
            mountPath: /mnt/secrets/{{ $key }}
            readOnly: true
          {{- end }}
        {{- end }}

        resources:
          requests:
            memory: {{ .Values.memoryRequests }}
            cpu: {{ .Values.cpuRequests }}
          limits:
            memory: {{ .Values.memoryLimits }}
            cpu: {{ .Values.cpuLimits }}
        ports:
        - containerPort: {{ .Values.applicationPort }}
          name: http
        livenessProbe:
          httpGet:
            path: {{ .Values.livenessPath }}
            port: {{ .Values.applicationPort }}
          initialDelaySeconds: {{ .Values.livenessDelay }}
          timeoutSeconds: {{ .Values.livenessTimeout }}
          periodSeconds: {{ .Values.livenessPeriod }}
          failureThreshold: {{ .Values.livenessFailureThreshold }}
        readinessProbe:
          httpGet:
            path: {{ .Values.readinessPath }}
            port: {{ .Values.applicationPort }}
          initialDelaySeconds: {{ .Values.readinessDelay }}
          timeoutSeconds: {{ .Values.readinessTimeout }}
          periodSeconds: {{ .Values.readinessPeriod }}
        imagePullPolicy: IfNotPresent
